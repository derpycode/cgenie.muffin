dMo.riv = runif(1, min = dMo.riv.min, max = dMo.riv.max),
loc.DU.carb = runif(1, min = loc.DU.carb.min, max = loc.DU.carb.max),
f.ox.lim = runif(1, min=f.ox.lim.min, max=f.ox.lim.max)
)
# Define mass balance function (to be used in sensRange analysis below)
solve.mass.balance <- function(pars){
derivs <- function(t, y, pars){
with(as.list(c(y,pars)), {
NU <- y[1]
NMo <- y[2]
NU.dU <- y[3]
NMo.dMo <- y[4]
dU.sw <- NU.dU/NU
dMo.sw <- NMo.dMo/NMo
f.ox <- f.ox.lim - f.eux - f.red
if(f.ox < 0){f.ox <- 0} # allowing f.ox.lim to vary occassionally produces negative values, in these rare cases f.ox is set to zero
red.and.eux.steps <- plyr::round_any((log10(f.eux+f.red)+3.1)*10, 1, f=round)
alpha.red.and.eux <-  mean_flux_feux[red.and.eux.steps] # calculate overall mean flux coefficient to broadly reducing and euxinic settings
# calculate mean flux coefficient to broadly reducing settings only
alpha.red <- abs(alpha.eux * (power+3.1)*10 - alpha.red.and.eux * red.and.eux.steps)/( red.and.eux.steps - (power+3.1)*10 )
if(red.and.eux.steps - (power+3.1)*10 == 0){
alpha.red <- abs(alpha.eux * (power+3.1)*10 - mean_flux_feux[red.and.eux.steps-1] * (red.and.eux.steps-1))/abs( (red.and.eux.steps-1) - (power+3.1)*10 )
}
if(is.na(alpha.red) == TRUE){ # In rare cases where f.red is sufficiently small for the above calculations to generate NA for alpha.red,
# assume that alpha.red is best represented by next expansion step along from lower bound of prescribed euxinia (most representative)
# If f.eux = 100% here, set alpha.red = 1, but doesnt matter what it is set to as there as f.red = 0 in this scenario.
if(f.eux==1){alpha.red <- 1}else{
red.and.eux.steps <- ((power+3.1)*10)+1
alpha.red.and.eux <-  mean_flux_feux[red.and.eux.steps]
alpha.red <- abs(alpha.eux * (power+3.1)*10 - alpha.red.and.eux * red.and.eux.steps)/( red.and.eux.steps - (power+3.1)*10 )
}
}
# print alpha.red
#print(paste("f.eux = ", f.eux, "bU.eux = ", bU.eux, "alpha.eux = ", alpha.eux, "f.red = ", f.red, "alpha.red = ", alpha.red))
# define mass balance equations
FU.ox <- bU.ox * NU/NU0 * A * f.ox
FU.red <- bU.red * NU/NU0 * A * f.red #* alpha.red
FU.eux <- bU.eux * NU/NU0 * A * f.eux * alpha.eux
FMo.ox <- bMo.ox * NMo/NMo0 * A * f.ox
FMo.red <- bMo.red * NMo/NMo0 * A * f.red #* alpha.red
FMo.eux <- bMo.eux * NMo/NMo0 * A * f.eux * alpha.eux
d.NU <- FU.riv - FU.ox - FU.red - FU.eux
d.NMo <- FMo.riv - FMo.ox - FMo.red - FMo.eux
d.NU.dU.sw <- dU.riv * FU.riv - (dU.sw + DU.ox) * FU.ox - (dU.sw + DU.red) * FU.red - (dU.sw + DU.eux) * FU.eux
d.NMo.dMo.sw <- dMo.riv * FMo.riv - (dMo.sw + DMo.ox) * FMo.ox - (dMo.sw + DMo.red) * FMo.red - (dMo.sw + DMo.eux) * FMo.eux
# see below for equations linking rock- and seawater-values
return(list(c(U = d.NU, Mo = d.NMo, d.NU.dU.sw , d.NMo.dMo.sw), dU = dU.sw + loc.DU.eux , dMo = dMo.sw + loc.DMo.eux,
dU.carb = dU.sw + loc.DU.carb, f.eux = f.eux, f.ox = f.ox, f.red = f.red))
})
}
# Define initial conditions based on modern
initial.conditions <- c(NU0, NMo0, NU0*dU.sw0, NMo0*dMo.sw0)
# Model is run dynamically for 10Myrs to ensure steady state - can run for 1Myr and get almost identical result, running for 1 Gyr gives fully identical result to 10Myrs
# Solving as steady state using rootSolve function 'steady' gives indistinguishable results, could change if prefered (ode gives more intuitive output)
time.step <- as.numeric(c(0,1e7))
return(ode(y = initial.conditions, t = time.step, func = derivs, parms=pars, d="vode", maxsteps=50000))
}
# Define minimum and maximum values of each parameter to be explored in global sensitivity analysis
# can print as table as desired
parRanges <- data.frame(min=c(DU.eux.min,
loc.DU.eux.min,
DMo.eux.min,
loc.DMo.eux.min,
f.red.min,
FU.riv.min,
FMo.riv.min,
bU.eux.min,
bMo.eux.min,
bU.red.min,
bMo.red.min,
bU.ox.min,
bMo.ox.min,
loc.bU.eux.min,
loc.bMo.eux.min,
dU.riv.min,
dMo.riv.min,
DU.red.min,
DMo.red.min,
DU.ox.min,
DMo.ox.min,
loc.DU.carb.min,
f.ox.lim.min
),
max=c(DU.eux.max,
loc.DU.eux.max,
DMo.eux.max,
loc.DMo.eux.max,
{1-f.eux}, # Set absolute maximum bound on f.red - must be done inside loop therefore not set above
FU.riv.max,
FMo.riv.max,
bU.eux.max,
bMo.eux.max,
bU.red.max,
bMo.red.max,
bU.ox.max,
bMo.ox.max,
loc.bU.eux.max,
loc.bMo.eux.max,
dU.riv.max,
dMo.riv.max,
DU.red.max,
DMo.red.max,
DU.ox.max,
DMo.ox.max,
loc.DU.carb.max,
f.ox.lim.max
))
rownames(parRanges) <- c("DU.eux",
"loc.DU.eux",
"DMo.eux",
"loc.DMo.eux",
"f.red",
"FU.riv",
"FMo.riv",
"bU.eux",
"bMo.eux",
"bU.red",
"bMo.red",
"bU.ox",
"bMo.ox",
"loc.bU.eux",
"loc.bMo.eux",
"dU.riv",
"dMo.riv",
"DU.red",
"DMo.red",
"DU.ox",
"DMo.ox",
"loc.DU.carb",
"f.ox.lim"
)
# perform global sensitivity analysis for this f.eux scenario
Mo.U.Step <- sensRange(parms=pars, func=solve.mass.balance,
parRange = parRanges, dist = "unif", num=1000)
# store key outputs of sensitivity analysis and add to summary data frame with f.eux values
Step.sum <- cbind(rep(f.eux, length(Mo.U.Step$dMo1e.07)),  Mo.U.Step$dMo1e.07, Mo.U.Step$dU1e.07, Mo.U.Step$dU.carb1e.07, Mo.U.Step$f.red1e.07, Mo.U.Step$f.ox1e.07, Mo.U.Step$f.eux1e.07 + Mo.U.Step$f.red1e.07 + Mo.U.Step$f.ox1e.07)
Mo.U.Sum <- rbind(Mo.U.Sum, Step.sum) # produce summary results dataframe
Mo.U.Sum.Full <- rbind(Mo.U.Sum.Full, Mo.U.Step) # produce full dataframe to investigate all outputs as desired
# print loop progress (progress bar function is misbehaving...) - optional (remove for speed)
print(paste((((power+3.1)*10)/length(power_sequence)*100),"% progress"))
print(paste("feux = ", f.eux))
}))
# rename summary columns for plotting
names(Mo.U.Sum) <- c("f.eux",  "dMo", "dU",  "dU.carb",  "f.red", "f.ox", "f.tot")
Mo.U.Sum <- filter(Mo.U.Sum, !is.na(dMo) & !is.na(dU))
dMo.map <- ggplot(Mo.U.Sum, aes(x=f.eux*100, y=dMo) ) +
stat_density_2d(aes(fill = ..ndensity..), geom = "raster", contour = FALSE) +
scale_fill_distiller(palette= "YlGnBu", direction=-1, limits=c(0,1)) +
theme_bw()+
ylab(expression(delta^98*"Mo"[eux]*" (‰)"))+xlab(expression("f"[eux]*" (%)"))+
scale_x_log10(breaks = c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100),
labels = c("0.1", rep("",8),"1.0", rep("",8),"10", rep("",8), "100"), sec.axis = sec_axis(~.+0, labels = NULL))+
scale_y_continuous(sec.axis = sec_axis(~.+0, labels = NULL),breaks=c(0,1,2,3), labels=c("0", "1.0", "2.0", " 3.0"))+
coord_cartesian(xlim= c(.1,100), ylim=c(min(Mo.U.Sum$dMo),max(Mo.U.Sum$dMo)), expand = c(0,0))+
theme( panel.border = element_rect(fill=NA,color="black", size=2,linetype="solid"),
axis.line = element_line(size=2, lineend = 'square'),
axis.ticks = element_line(size=1, colour="black"),
axis.title = element_text(size=34),
axis.text =element_text( size=26, colour="black"),
legend.text = element_text( size=16),
legend.title = element_text( size=16),
legend.justification=c(1,1), legend.position=c(.98,.98),
plot.margin = margin(5,5,5,5),
legend.background = element_rect(fill=alpha('white', 0.6)),
axis.title.x = element_blank(),
axis.text.x =  element_blank(),
axis.ticks.x.top = element_blank(),
axis.ticks.y.right = element_blank(),
axis.ticks.length = unit(5, "points"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
guides(fill=guide_legend(title="Density"))
dU.map <- ggplot(Mo.U.Sum, aes(x=f.eux*100, y=dU) ) +
stat_density_2d(aes(fill = ..ndensity..), geom = "raster", contour = FALSE) +
scale_fill_distiller(palette= "YlGnBu", direction=-1, limits=c(0,1)) +
theme_bw()+
ylab(expression(delta^238*"U"[eux]*" (‰)"))+xlab(expression("f"[eux]*" (%)"))+
scale_x_log10(breaks = c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100),
labels = c("0.1", rep("",8),"1.0", rep("",8),"10", rep("",8), "100"), sec.axis = sec_axis(~.+0, labels = NULL))+
scale_y_continuous(sec.axis = sec_axis(~.+0, labels = NULL))+
coord_cartesian(xlim= c(.1,100), ylim=c(min(Mo.U.Sum$dU),max(Mo.U.Sum$dU)), expand = c(0,0))+
theme(panel.border = element_rect(fill=NA,color="black", size=2,linetype="solid"),
axis.line = element_line(size=2, lineend = 'square'),
axis.ticks = element_line(size=1, colour="black"),
axis.title = element_text(size=34),
axis.text =element_text( size=26, colour="black"),
legend.text = element_text( size=16),
legend.title = element_text( size=16),
legend.justification=c(1,1), legend.position=c(.98,.98),
legend.background = element_rect(fill=alpha('white', 0.6)),
plot.margin = margin(5,5,5,5),
axis.ticks.x.top = element_blank(),
axis.ticks.y.right = element_blank(),
axis.ticks.length = unit(5, "points"),
panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
guides(fill=guide_legend(title="Density"))
##==============================================
## Isotope model plots and Rhuddanian prediction
##==============================================
# Rhuddanian.Data.RData contains two dataframes: Murzuq (euxinic Murzuq Basin files), Bartlett_Data_Rhuddanian (Rhuddanian  Anticosti carbonates)
load("Rhuddanian.Data.RData")
dMo_lower <- min(Murzuq$d98Mo_auth_Al, na.rm=T) # d98Mo detrital correction using [Al]
dMo_upper <- max(Murzuq$d98Mo_auth_Al, na.rm=T) # d98Mo detrital correction using [Al]
dU_lower <- min(Murzuq$dU238_auth_a, na.rm=T) # d238.02891U detrital correction using [Th]
dU_upper <- max(Murzuq$dU238_auth_a, na.rm=T) # d238.02891U detrital correction using [Th]
dU.carb_lower <- min(Bartlett_Data_Rhuddanian$U_iso, na.rm=T)
dU.carb_upper <- max(Bartlett_Data_Rhuddanian$U_iso, na.rm=T)
rhudd.all <- filter(Mo.U.Sum, dU <= dU_upper # Summarise mass balance results compatible with U and Mo euxinic shale values and U carbonate values
& dU >= dU_lower
& dMo <= dMo_upper
& dMo >= dMo_lower
& dU.carb <= dU.carb_upper
& dU.carb >= dU.carb_lower)
rhudd.dMo <- filter(Mo.U.Sum, dMo <= dMo_upper # Summarise mass balance results compatible with Mo euxinic shale values
& dMo >= dMo_lower)
rhudd.dU <- filter(Mo.U.Sum, dU <= dU_upper # Summarise mass balance results compatible with U euxinic shale values
& dU >= dU_lower)
rhudd.dU.carb <- filter(Mo.U.Sum, dU.carb <= dU.carb_upper # Summarise mass balance results compatible with U carbonate values
& dU.carb >= dU.carb_lower)
rhudd.iso.sum <- rbind(rhudd.all, rhudd.dMo, rhudd.dU, rhudd.dU.carb) # Combine into one dataframe for plotting
# Generate and assign names to results in rhudd.iso.sum
names <- c(rep("all", nrow(rhudd.all)), rep("dMo only", nrow(rhudd.dMo)), rep("dU only", nrow(rhudd.dU)), rep("dU carb only", nrow(rhudd.dU.carb)))
rhudd.iso.sum <- cbind(rhudd.iso.sum, names)
# Generate density plots of each proxy and all proxies combined
dens.ridge <- ggplot(rhudd.iso.sum, aes(x=f.eux*100))+
annotate(geom="rect", ymin=-Inf, ymax=Inf, xmin=0.11, xmax=0.3, fill="grey90", color="grey60")+
geom_density_ridges( alpha=.7, size=1,aes(y=names, fill=names), scale=.95) +
theme_bw()+
ylab("freq")+
xlab(expression("f"[eux]*" (%)"))+
scale_x_log10(breaks = c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100),
labels = c("0.1", rep("",8),"1.0", rep("",8),"10", rep("",8), "100"))+coord_cartesian(xlim= c(.1,100), clip="off", expand =c(0,0))+
theme(panel.border = element_rect(fill=NA,color="black", size=NA,linetype="solid"),
axis.ticks = element_line(size=1, colour="black"),
axis.title = element_text(size=34),
axis.text = element_text( size=26, colour="black"),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
legend.text = element_text( size=18),
legend.justification=c(1,1), legend.position='none',
axis.title.x = element_blank(),
axis.text.x =  element_blank(),
axis.line.x = element_line(size=2,colour = "black"),
plot.margin = margin(20,5,5,10),
axis.ticks.y =  element_blank(),
axis.ticks.length = unit(5, "points"),
legend.background = element_rect(fill=alpha('white', 0.6)),
panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
scale_fill_manual(values=c(rgb(166,220,181,maxColorValue=255),"goldenrod",  "skyblue", "goldenrod" ))
## Generate data distributions for right side of plots (and white box for next to density distributions)
dMo.right <- ggplot() +
theme_bw()+
coord_cartesian(xlim= c(.1,100), ylim=c(min(Mo.U.Sum$dMo),max(Mo.U.Sum$dMo)), expand = c(0,0))+
theme(panel.border = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
legend.position='none',
element_blank(),
plot.margin = margin(5,5,5,0),
panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
annotate(geom="rect", xmin=-Inf, xmax=Inf, ymin=dMo_lower, ymax=dMo_upper,fill=rgb(166,220,181,maxColorValue=255), color=rgb(166,220,181,maxColorValue=255))
dU.right <- ggplot() +
theme_bw()+
coord_cartesian(xlim= c(.1,100), ylim=c(min(Mo.U.Sum$dU),max(Mo.U.Sum$dU)), expand = c(0,0))+
theme(panel.border = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
legend.position='none',
element_blank(),
plot.margin = margin(5,5,5,0),
panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
annotate(geom="rect", xmin=-Inf, xmax=Inf, ymin=dU_lower, ymax=dU_upper, fill=rgb(166,220,181,maxColorValue=255), color=rgb(166,220,181,maxColorValue=255))
dens.right <- ggplot() +
theme_bw()+
theme(panel.border = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
legend.position='none',
element_blank(),
plot.margin = margin(20,5,5,0),
panel.grid.major = element_blank(),panel.grid.minor = element_blank())
fig2.dens.ridge <- ggarrange(dens.ridge, dens.right,dens.right, dMo.map, dMo.right,dens.right, dU.map,dU.right,dens.right, ncol=3, nrow=3,heights=c(.6,1,1), widths=c(1,.05,0))
##==============================================
## Save as pdf
##==============================================
# Generate statistics to describe distributions for comparison in text
mean(rhudd.all$f.eux)
median(rhudd.all$f.eux)
quantile(rhudd.all$f.eux, 0.05)
quantile(rhudd.all$f.eux, 0.95)
nrow(rhudd.all)
nrow(rhudd.dU)
nrow(rhudd.dU.carb)
nrow(rhudd.dMo)
mean(rhudd.dU.carb$f.eux)
median(rhudd.dU.carb$f.eux)
quantile(rhudd.dU.carb$f.eux, 0.05)
quantile(rhudd.dU.carb$f.eux, 0.95)
View(Mo.U.Sum.Full)
setwd("~/Box Sync/Stanford/cGENIE_Trial/userconfigs/CB.fm0450.O2.PO4.BASESCH4.cold")
csv.string <- as.character()
for(CO2 in c(3)){
for(O2 in c(0.01, 0.016, 0.025, 0.04, 0.063, 0.1, 0.16, 0.25, 0.4, 0.63, 1)){ # Log scale from 0.01 to 1 PAL e.g. 10^seq(-2,0,.2)
for(EFD in c(0.5)){
for(PO4 in c(0.01, 0.016, 0.025, 0.04, 0.063, 0.1, 0.16, 0.25, 0.4, 0.63, 1)){
writeLines(c("#",
"# --- CLIMATE --------------------------------------------------",
'#',
'# set climate feedback',
'ea_36=y',
'#',
'# --- ATMOSPHERIC PHOTOCHEMISTRY --------------------------------------',
'#',
'# atmospheric photochemical scheme ID string',
'ac_par_atm_CH4_photochem="claire06" # CH4 cycle parameterization based on Reinhard et al. 2020 Geobiology',
'#',
'# --- BIOLOGICAL NEW PRODUCTION --------------------------------',
'#',
'# biological scheme ID string',
'bg_par_bio_prodopt="bio_P"',
'# [PO4] M-M half-sat value (mol kg-1)',
'bg_par_bio_c0_PO4=0.10E-06',
'# biological uptake time-scale',
'bg_par_bio_tau=63.3827',
'#',
'# --- ORGANIC MATTER EXPORT RATIOS -----------------------------',
'#',
'#production fraction of dissolved organic matter',
'bg_par_bio_red_DOMfrac=0.66',
'#',
'# --- INORGANIC MATTER EXPORT RATIOS ---------------------------',
'#',
'# SET NO PELAGIC CARBONATE PRODUCTION',
'bg_par_bio_red_POC_CaCO3=0.0',
'bg_par_bio_red_POC_CaCO3_pP=0.0',
'#',
'# --- REMINERALIZATION -----------------------------------------',
'# CH4 cycle and all other remin parameterization based on Reinhard et al. 2020 Geobiology',
'# set remineralization scheme [e.g., hard thresholds "true" // "false"]',
'bg_ctrl_bio_remin_thresh=.false.',
'# half-saturation constant for oxic remin',
'bg_par_bio_remin_c0_O2=1.0E-07',
'# inhibition constant for oxic remin',
'bg_par_bio_remin_ci_O2=1.0E-05',
'# half-saturation constant for sulphate reduction',
'bg_par_bio_remin_c0_SO4=5.0E-04',
'# inhibition constant for sulphate reduction',
'bg_par_bio_remin_ci_SO4=5.0E-04',
'# DOC lifetime (yrs)',
'bg_par_bio_remin_DOMlifetime=1.0',
'# initial fractional abundance of POC component #2',
'bg_par_bio_remin_POC_frac2=0.055',
if(EFD == 1){
paste0('bg_par_bio_remin_POC_eL1=589.9451 # modern e-folding depth')}
else if(EFD == 0.5){
paste0('bg_par_bio_remin_POC_eL1=294.9745 # 50% modern e-folding depth following Reinhard et al. 2020 Geobiology')},
'# remineralization length #2 for POC',
'bg_par_bio_remin_POC_eL2=1000000.0',
'# initial fractional abundance of CaCO3 component #2',
'bg_par_bio_remin_CaCO3_frac2=0.45',
'# depth of remineralization or CaCO3',
'bg_par_bio_remin_CaCO3_eL1=1.8905e+003',
'# remineralization length #2 for CaCO3',
'bg_par_bio_remin_CaCO3_eL2=1000000.0',
'# sulfide oxidation rate form',
'bg_opt_bio_remin_oxidize_H2StoSO4="OLD"',
'# sulfide oxidation rate constant [NOTE: only used if rate law is linear]',
'#bg_par_bio_remin_kH2StoSO4=1.0E07',
'# aerobic CH4 oxidation scheme',
'#bg_par_bio_remin_CH4ox="CH4ox_MM" # RGS commented out as no longer used in GENIE methane scheme',
'# rate constant for aerobic methanotrophy',
'bg_par_bio_remin_AER_kAER=1.574',
'# O2 half-saturation constant for aerobic methanotrophy',
'bg_par_bio_remin_AER_Km_O2=2.0E-05',
'# rate constant for AOM',
'bg_par_bio_remin_AOM_kAOM=0.022',
'# SO4 half-saturation constant for AOM',
'bg_par_bio_remin_AOM_Km_SO4=5.0E-04',
'# enable/disable thermodynamic terms',
'bg_par_bio_remin_AER_thermo="on"',
'bg_par_bio_remin_AOM_thermo="on"',
'# biological energy quanta (BEQ) for CH4 oxidation',
'bg_par_bio_remin_AER_BEQ=15.0',
'bg_par_bio_remin_AOM_BEQ=15.0',
'#',
'# --- DATA SAVING ----------------------------------------------',
'#',
'bg_par_data_save_level=4',
'bg_ctrl_debug_lvl0=.true.',
'ma_debug_loop=1',
'#',
'# --- FORCINGS -------------------------------------------------',
'#',
'# specify forcings',
'bg_par_forcing_name="pyyyyz.RpCO2_Rp13CO2.RpO2"',
paste0('bg_par_atm_force_scale_val_3=', CO2*278.0E-06,' # restoring forcing for pCO2 [atm]'),
paste0('bg_par_atm_force_scale_val_6=', O2*0.2095,'  # restoring forcing for pO2 [atm]'),
'ac_par_atm_wetlands_FCH4=3.0E12             # wetland CH4 flux [mol/yr], from Reinhard et al 2020 Geobiology',
'#',
'# --- INITIAL CONDITIONS ---------------------------------------',
'#',
'# ATMOSPHERIC CHEMISTRY',
paste0('ac_atm_init_3=', CO2*278.0E-06,' # pCO2 [atm]'),
paste0('ac_atm_init_6=', O2*0.2095,' # pO2 [atm]'),
'ac_atm_init_10=10.0E-06             # pCH4 [atm]',
'#',
'# OCEAN CHEMISTRY',
'bg_ocn_init_3=2.244E-03             # DIC [mol/kg]',
paste0('bg_ocn_init_8=', PO4*2.159E-06,' # PO4 [mol/kg]'),
'bg_ocn_init_10=0.0                  # O2 [mol/kg]',
'bg_ocn_init_12=2.363E-03            # ALK [mol/kg]',
'bg_ocn_init_15=0.0                  # DOM_C [mol/kg]',
'bg_ocn_init_20=0.0                  # DOM_P [mol/kg]',
'bg_ocn_init_25=0.0                  # CH4 [mol/kg]',
'bg_ocn_init_35=1.025E-02            # Ca [mol/kg]',
'bg_ocn_init_38=1.000E-03            # SO4 [mol/kg]',
'bg_ocn_init_40=0.0                  # H2S [mol/kg]',
'bg_ocn_init_50=5.282E-02            # Mg [mol/kg]',
'#',
'# --- MISC ----------------------------------------------------------',
'#',
'# kraus-turner mixed layer scheme on (1) or off (0)',
'go_imld = 1',
'#',
'# --- END ------------------------------------------------------',
'#',
'#'),
paste0('muffin.CB.fm0450dc.BASESCH4.', CO2, 'CO2.', O2, 'O2.', EFD, 'EFD.', PO4, 'PO4.config'))
csv.string <- c(csv.string,  paste0('muffin.CB.fm0450dc.BASESCH4.', CO2, 'CO2.', O2, 'O2.', EFD, 'EFD.', PO4, 'PO4.config'))
}}}}
write.csv(as.data.frame(csv.string), file=paste0("names.file.", Sys.time(), ".csv"))
#### SBATCH script template for running cGENIE ensembles on Sherlock ####
# This R script generates batch a SLURM scipt for a cGENIE ensemble parameterized below
date.generated <- 20220419
#### cGENIE ensemble parameters ####
base.config <- "muffin.CB.fm0450dc.BASESCH4"
project.directory <- "CB.fm0450.O2.PO4.BASESCH4.cold"
sub.ensemble.no.start <- 1 # here
CO2.vec <- c(3)
O2.vec <- c(0.01, 0.016, 0.025, 0.04, 0.063, 0.1, 0.16, 0.25, 0.4, 0.63, 1)
EFD.vec <- c(0.5)
PO4.vec <- c(0.01, 0.016, 0.025, 0.04, 0.063, 0.1, 0.16, 0.25, 0.4, 0.63, 1)
modifier <- ""
model.years <- 10000
#### Sherlock parameters ####
time.requested <- "48:00:00"
nodes <- 1
cores <- 20
#### Start loop for all batch scripts in [sub-]ensemble ####
no.scripts <- ceiling(length(CO2.vec)*length(O2.vec)*length(EFD.vec)*length(PO4.vec)/cores)
for(script.no in 1:no.scripts){
#### Generate text for batch script ####
# Initiate text vector
text.vec <- as.character()
# Frontmatter
text.vec <- c(text.vec,
'#! /bin/bash',
'',
paste0('#SBATCH --time=', time.requested),
paste0('#SBATCH --nodes=', nodes),
paste0('#SBATCH --ntasks=', cores),
'#SBATCH --mail-user=rstockey@stanford.edu',
'#SBATCH --mail-type=BEGIN,FAIL,END,TIME_LIMIT',
paste0('#SBATCH --output=slurm-', date.generated, '.', project.directory, '.', sub.ensemble.no.start+script.no-1, '.out'),
'',
'# load modules',
'ml system',
'ml parallel',
'',
'# tell dynamic linker (ld.so) where to look for the shared libraries to use',
'LD_LIBRARY_PATH=/home/users/rstockey/cgenie_netcdf/lib',
'export LD_LIBRARY_PATH',
'',
'# change directory',
'cd ~/cgenie.muffin/genie-main',
'',
'# execute cGENIE runs in parallel',
'parallel ::: \\'
)
job.no <- 0 # reset job count for loop 1
# Loop through ./runmuffin.sh commands for ensemble
for(CO2 in CO2.vec){
for(O2 in O2.vec){
for(EFD in EFD.vec){
for(PO4 in PO4.vec){
job.no <- job.no + 1
if(job.no >= ((script.no-1)*cores)+1 & job.no <= (script.no)*cores){
text.vec <- c(text.vec, paste0('"sleep ', 3*(job.no-(script.no-1)*cores), 'm && ./runmuffin.sh ', base.config, ' RGS/', project.directory, ' ', base.config, '.',
CO2, 'CO2.', O2, 'O2.', EFD, 'EFD.', PO4, 'PO4.', modifier, 'config ', model.years,  '" \\'))
}else{}
}}}}
# Loop through mv commands for ensemble (to relocate results files/directories to group home (esper) where there is more storage)
text.vec <- c(text.vec,
'',
'# Move output and archived output to group home (more storage)')
job.no <- 0 # reset job count for loop 2
for(CO2 in CO2.vec){
for(O2 in O2.vec){
for(EFD in EFD.vec){
for(PO4 in PO4.vec){
job.no <- job.no + 1
if(job.no >= (script.no-1)*cores & job.no <= (script.no)*cores){
text.vec <- c(text.vec, paste0('mv /home/users/rstockey/cgenie_archive/', base.config, '.',
CO2, 'CO2.', O2, 'O2.', EFD, 'EFD.', PO4, 'PO4.', modifier, 'config.tar.gz /home/groups/esper/RGS/GENIE/cgenie_archive'))
} else{}
}}}}
#### Save batch script ####
writeLines(text.vec, paste0('~/Box Sync/Stanford/cGENIE_Trial/userconfigs/SBATCH.', date.generated, '.', project.directory, '.', sub.ensemble.no.start+script.no-1, '.sbatch'))
}
